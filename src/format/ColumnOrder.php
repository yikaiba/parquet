<?php
namespace hongkai\parquet\format;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

/**
 * Union to specify the order used for the min_value and max_value fields for a
 * column. This union takes the role of an enhanced enum that allows rich
 * elements (which will be needed for a collation-based ordering in the future).
 * 
 * Possible values are:
 * * TypeDefinedOrder - the column uses the order defined by its logical or
 *                      physical type (if there is no logical type).
 * 
 * If the reader does not support the value of this union, min and max stats
 * for this column should be ignored.
 */
class ColumnOrder
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'TYPE_ORDER',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\hongkai\parquet\format\TypeDefinedOrder',
        ),
    );

    /**
     * The sort orders for logical types are:
     *   UTF8 - unsigned byte-wise comparison
     *   INT8 - signed comparison
     *   INT16 - signed comparison
     *   INT32 - signed comparison
     *   INT64 - signed comparison
     *   UINT8 - unsigned comparison
     *   UINT16 - unsigned comparison
     *   UINT32 - unsigned comparison
     *   UINT64 - unsigned comparison
     *   DECIMAL - signed comparison of the represented value
     *   DATE - signed comparison
     *   TIME_MILLIS - signed comparison
     *   TIME_MICROS - signed comparison
     *   TIMESTAMP_MILLIS - signed comparison
     *   TIMESTAMP_MICROS - signed comparison
     *   INTERVAL - unsigned comparison
     *   JSON - unsigned byte-wise comparison
     *   BSON - unsigned byte-wise comparison
     *   ENUM - unsigned byte-wise comparison
     *   LIST - undefined
     *   MAP - undefined
     * 
     * In the absence of logical types, the sort order is determined by the physical type:
     *   BOOLEAN - false, true
     *   INT32 - signed comparison
     *   INT64 - signed comparison
     *   INT96 (only used for legacy timestamps) - undefined
     *   FLOAT - signed comparison of the represented value (*)
     *   DOUBLE - signed comparison of the represented value (*)
     *   BYTE_ARRAY - unsigned byte-wise comparison
     *   FIXED_LEN_BYTE_ARRAY - unsigned byte-wise comparison
     * 
     * (*) Because the sorting order is not specified properly for floating
     *     point values (relations vs. total ordering) the following
     *     compatibility rules should be applied when reading statistics:
     *     - If the min is a NaN, it should be ignored.
     *     - If the max is a NaN, it should be ignored.
     *     - If the min is +0, the row group may contain -0 values as well.
     *     - If the max is -0, the row group may contain +0 values as well.
     *     - When looking for NaN values, min and max should be ignored.
     * 
     * @var \hongkai\parquet\format\TypeDefinedOrder
     */
    public $TYPE_ORDER = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['TYPE_ORDER'])) {
                $this->TYPE_ORDER = $vals['TYPE_ORDER'];
            }
        }
    }

    public function getName()
    {
        return 'ColumnOrder';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->TYPE_ORDER = new \hongkai\parquet\format\TypeDefinedOrder();
                        $xfer += $this->TYPE_ORDER->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ColumnOrder');
        if ($this->TYPE_ORDER !== null) {
            if (!is_object($this->TYPE_ORDER)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('TYPE_ORDER', TType::STRUCT, 1);
            $xfer += $this->TYPE_ORDER->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
